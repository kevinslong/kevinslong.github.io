<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://kevinslong.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jun 2020 21:08:18 +0800</lastBuildDate>
    
	<atom:link href="http://kevinslong.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://kevinslong.github.io/about/</link>
      <pubDate>Sun, 28 Jun 2020 21:08:18 +0800</pubDate>
      
      <guid>http://kevinslong.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://kevinslong.github.io/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kevinslong.github.io/git/</guid>
      <description>Go项目配置git hook 这里开始输入正文
一、前言 Go语言官方提供有：
这里开始输入正文
 gofmt 来进行Go代码格式化 go tool vet 检查Go源码中静态错误第三方提供有: golint 检查GO代码风格(注释，命名等) goimports 自动导入需要的import statement和自动移除未被使用import statement  下面的pre-commit hook将上述的四个工具集成在一起。在将git暂存区中的代码commit到仓库之前，会对被改动的Go文件(不包括vendor目录下的文件)做下面的工作:
这里开始输入正文
 自动调整被改动文件的 import statement 自动格式化被改动文件 展示代码中的静态错误 展示不符合规范的代码风格问题上述1和2是自动进行的, 而3和4则要求开发者按照提示进行修正，只有静态错误和代码风格全部修正完成之后，才能够commit成功。  二、用法  下载第三方的golint, goimports工具   go get golang.org/x/tools/cmd/goimports go get golang.org/x/lint/golint 这里开始输入正文
 将下面的脚本拷贝到项目仓库的 .git/hooks/pre-commit文件中(没有该文件新建后一个) 赋予文件可行性权限，并且重新加载git配置   chmod +x .git/hooks/pre-commit chmod +x .git/hooks/commit-msg git init 三、脚本「pre-commit」 #!/bin/sh  STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep &amp;#34;.go$&amp;#34;) if [[ &amp;#34;$STAGED_GO_FILES&amp;#34; = &amp;#34;&amp;#34; ]]; then exit 0 fi PASS=true for FILE in $STAGED_GO_FILES do # 跳过vendor目录下的文件 if [[ $FILE == &amp;#34;vendor&amp;#34;* ]];then continue fi # goimports 检查并调整导入语句 goimports -w $FILE if [[ $?</description>
    </item>
    
  </channel>
</rss>